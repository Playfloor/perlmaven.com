=title Understanding Regular Expressions found in Getopt::Std
=timestamp 2015-04-25T09:00:01
=indexes regex
=status show
=books beginner
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Using regular expressions provides us with enormous power but reading and understanding
complex regular expressions is not an easy task. I noticed, for many people,
it feels much easier to write a regular expression than to read it.

This is probably true regardless of the host language but in Perl
we tend to use regexes much more than in other languages.

=abstract end

In my humble opinion, the ease of understanding regexes is just a question of practice.

If you practice it enough, you will stop seeing them as a set of random characters.

So in a number of writings I'll take regex examples from open source projects and
I'll try to understand and explain them. I don't have a clear path yet. I hope after
seeing and writing about a few examples I'll have a better understanding how to
explain the regexes and the process of understanding them in a coherent way.

Some of the regexes will be simple ones. I am still practicing the explanation too.

<h2>Command line parameters</h2>

Looking at <a href="https://metacpan.org/pod/Getopt::Std">Getopt::Std</a> I saw a line like this:

<code lang="perl">
while (@ARGV && ($_ = $ARGV[0]) =~ /^-(.)(.*)/) {
</code>

The regex <hl>/^-(.)(.*)/</hl> is quite simple.
<hl>^</hl> at the beginning of the string there must be a
dash <hl>-</hl>. After that any character matched by <hl>.</hl>
and captured by the parentheses <hl>(.)</hl> into <hl>$1</hl>.
The <hl>(.*)</hl> will capture any leftover characters from the string.

So this regex will match things like "-a", "-abc", or "--xyz" (the (.) will match the 2nd dash), but it won't match "abc".

This is of course not surprising as the purpose of <a href="https://metacpan.org/pod/Getopt::Std">Getopt::Std</a> is to handle
command line parameters with single leading dash.
(There are more <a href="/advanced-usage-of-getopt-long-accepting-command-line-arguments">powerful ways</a>
to handle <a href="/how-to-process-command-line-arguments-in-perl">command line parameters</a>, but right now we only care about the regex.)

<h2>Look-ahead assertion</h2>

Still in <a href="https://metacpan.org/pod/Getopt::Std">Getopt::Std</a> I saw these two lines:

<code lang="perl">
my (@witharg) = ($args =~ /(\S)\s*:/g);
my (@rest) = ($args =~ /([^\s:])(?!\s*:)/g);
</code>

The first one is very simple. <hl>(\S)</hl> captures a single non-white space character
then <hl>\s*</hl> will eat all white spaces (but does not require any)
and then a colon <hl>:</hl> is required. The whole thing is matched globally
(because of the <hl>/g</hl> at the end, and will return the non-whitespace characters
matched by <hl>(\S)</hl>.

So if <hl>$args = 'a: b  : cde: +: -'</hl>, the @witharg will be <hl>('a', 'b', 'e', '+')</hl>.

Those are the flags that need to come with a value.

I am not sure why does this code accept any non-word character as flag but
maybe that's just my conservative view.

The second regex is a bit more complex. It has two groups. The first one <hl>([^\s:])</hl>
captures a (single) character that is NOT white-space and NOT colon. (so it can be a letter
or another special character). The second group <hl>(?!\s*:)</hl> is a <b>zero-width negative
look-ahead assertion</b>. Disregard the <hl>?!</hl> and you will see it 
tries to match 0 or more white spaces followed by a colon.
The leading <hl>?!</hl> means that this is a zero-width negative look-ahead, which means there is either no colon after the
first group matched or if there is a colon it is separated by at least one non-space character from 
the match of the first group.

So if we try to match with the same string <hl>'a: b  : cde: +: -'</hl>
we'll get the list of the other non-whitespace and non-colon character:
<hl>('c', 'd', '-')</hl>


<h2>Alternate</h2>

<code lang="perl">
$has_pod = 1, last if /^=(pod|head1)/;
</code>

This code is easy. <hl>^</hl> - at the beginning there is an equal sign <hl>=</hl>
followed by either the word "pod" or the word "head1".

It is not checked if the string is =podcast  or =head123. Both of these will be accepted.

For more example look at the <a href="/regex-cheat-sheet">regex cheat-sheet</a> and the links from there.
