=title Escaping \ in regex: Unmatched ( in regex; marked by  <-- HERE
=timestamp 2020-05-30T10:30:01
=indexes qr
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0
=show_related 1

=abstract start

How can you check if a string contains a backslash <hl>\</hl> or even better it starts with one?

You could use use the <a href="/index-function">index</a> function to check that, but what if this is only a part of something more
complex that will require the use of regexes?

=abstract end

Because backslash <hl>\</hl> has special meaning in strings and regexes, if we would like to tell Perl that we really mean a
backs-slash, we will have to "escape" it, by using the "escape character" which happens to be back-slash itself.
So we need to write two back-slashes: <hl>\\</hl>.
Becasue we will also want to capture it we also put it in parentheses.

The first solution worked:

<include file="examples/regex_escaping.pl">

<h2>Escape in a variable</h2>

Then, in order to make our regex more reusable we wanted to put it in a variable

<include file="examples/regex_escaping_broken.pl">

and suddenly we got and error:

<include file="examples/regex_escaping_broken.out">

In order to fix this we first need to understand what happened. So we printed out the content of <hl>$pat</hl>.
It has <hl>(\)</hl> in it. That helped me understand that by the time $pat arrived in the regex Perl already "ate"
one of the backslashes so now the regex engine see the opening parentheses as a special character,
but not the closing parenthes as it was escaped.

One solution would be to write:

<code>
my $pat = '(\\\\)';
</code>

but that can get out of hand very quickly.

<h2>Use qr to quote a regexp like string</h2>

A better way is to use <hl>qr</hl> we create $pat so Perl will already convert our expression to a compiled regex.

<include file="examples/regex_escaping_fixed.pl">
