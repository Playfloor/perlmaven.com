=title Linia hash-bang czyli jak uruchamiać skrypty Perla pod Linuksem
=timestamp 2015-06-24T19:03:01
=indexes #!, -w, -t, -T, /usr/bin/perl
=status show
=books beginner
=author szabgab
=comments_disqus_enable 0
=translator rozie
=original hashbang

=abstract start

W <a href="/instalacja-perla-i-rozpoczecie-pracy">pierwszych skryptach</a>, które pisaliśmy, nie ma tego
konstruktu, ale może on być przydatny w skryptach Perla na systemach uniksowych takich jak Linux czy Mac OSX.

Nie jest tak naprawdę wymagany, możesz po prostu ominąć ten artykuł i wrócić później, kiedy będziesz chciał zrozumieć co
znaczy <hl>#!/usr/bin/perl</hl> na początku wielu skryptów Perla.

=abstract end

Zanim przejdę do szczegółów, pozwól mi powiedzieć, że tak linia jest także nazywana she-bang, 
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang</a> lub sh-bang, a także innymi nazwami.

Pierwszy program, którego zwykle uczą się ludzie, to zwykle "Hello world". Oto skrypt:

<code lang="perl">
use strict;
use warnings;
 
print "Hello World\n";
</code>

Możemy go zapisać do pliku nazwanego <hl>hello.pl</hl>, otworzyć terminal (lub Cmd pod Windows). <hl>cd</hl> do katalogu gdzie zapisaliśmy plik
i uruchomić skrypt przez wpisanie <hl>perl hello.pl</hl>.

To znaczy, uruchamiamy Perla i mówimy mu, by wykonał nasz skrypt.

Czy byłoby możliwe wykonanie skryptu bez wcześniejszego uruchomienie perla? Czy byłoby możliwe po prostu uruchomić <hl>hello.pl</hl>?

W systemach uniksowych jest to całkiem proste. Pod Windows jest to całkiem inna historia i zostanie poruszona oddzielnie.

<h2>hash-bang w systemach uniksowych</h2>

Spróbujmy uruchomić skrypt:

<code>
$ hello.pl
-bash: hello.pl: command not found
</code>

Nasze środowisko nie może znaleźć skryptu.

Co jeśli podamy ścieżkę do skryptu (który jest i tak w bieżącym katalogu):

<code>
$ ./hello.pl
-bash: ./hello.pl: Permission denied
</code>

Teraz już znajduje skrypt, ale nie ma uprawnień do jego uruchomienia.

Na Linuksie czy Mac OSX, czy każdym innym systemie uniksowym możemy uczynić skrypt "wykonywalnym" przez ustawienie bitu w standardowych atrybutach pliku
w tak zwanej <a href="https://en.wikipedia.org/wiki/Inode">tablicy inode'ów</a>.
Można to łatwo zrobić używając polecenia <hl>chmod</hl>. Użyjemy <hl>chmod u+x hello.pl</hl>:

Najpierw użyjemy polecenia <hl>ls -l</hl> powłoki Uniksa aby zobaczyć sytuację przed,
następnie użyjemy <hl>chmod</hl> do zmiany uprawnień,
a na końcu sprawdzimy sytuację po tej operacji.
Część <hl>u+x</hl> operacji mówi chmod aby dodał prawa wykonania (x) dla użytkownika (u), który jest właścicielem tego pliku,
ale dla nikogo innego. (<hl>chmod +x hello.pl</hl> przyznałoby prawa wykonania każdemu w systemie.)

<code>
$ ls -l hello.pl
-rw-r--r--  1 gabor  staff  50 Apr 21 10:11 hello.pl

$ chmod u+x hello.pl 

$ ls -l hello.pl 
-rwxr--r--  1 gabor  staff  50 Apr 21 10:11 hello.pl
</code>

Zwróć uwagę na dodatkowy <hl>x</hl> jako czwarty znak odpowiedzi.

Spróbujmy uruchomić skrypt ponownie:

<code>
$ ./hello.pl 
./hello.pl: line 1: use: command not found
./hello.pl: line 2: use: command not found
./hello.pl: line 4: print: command not found
</code>

Znacznie lepiej :)

Teraz możemy już uruchomić skrypt, ale nie robi on tego, co chcemy. W rzeczywistości narzeka, że nie może
znaleźć poleceń 'use' ani 'print'. To co się tu wydarzyło to to, że powłoka, której używamy (prawdopodobnie bash) próbował
interpretować polecenia w pliku, ale nie znalazł takich poleceń jak <hl>use</hl> czy <hl>print</hl>
w Linuksie/Uniksie. W jakiś sposób musimy powiedzieć powłoce, że jest to skrypt perlowy. Służy do tego hash-bang.
 
Jeśli wyedytujemy plik i dodamy


<code>
#!/usr/bin/perl
</code>

jako pierwszą linię skryptu i bez spacji, a następnie spróbujemy uruchomić skrypt ponownie:

<code>
$ ./hello.pl 
Hello World
</code>

działa już jak oczekujemy.

Jednakże, jeśli spróbujemy uruchoić go bez <hl>./</hl>, nadal nie będzie mógł go znaleźć:

<code>
$ hello.pl
-bash: hello.pl: command not found
</code>

W celu rozwiązania tego musimy zmienić zmienną środowiskową <hl>PATH</hl>. Jako, że skupiamy się głównie
na linii hash-bang, nie chcę wchodzić w dalsze dokładnie wyjaśnienia, więc pozwól, że po prostu podam Ci polecenie:

<code>
$ PATH=$PATH:$(pwd)
</code>

dołączające bieżący katalog do listy katalogów w zmiennej środowiskowej PATH.
Gdy to zrobimy, możemy teraz uruchomić:

<code>
$ hello.pl
Hello World
</code>

<h2>Jak działa linia hash-bang?</h2>

Dodaliśmy <hl>#!/usr/bin/perl</hl> jako pierwszą linię naszego skryptu:

Kiedy uruchamiamy skrypt, uruchamiamy go w środowisku naszej bieżącej powłoki. Dla większości ludzi pod Linuksem/Uniksem będzie to Bash.
Bash przeczyta pierwszą linię skryptu. Jeśli zaczyna się ona od hasha i wykrzyknikiem (hash-bang) <hl>#!</hl>,
wówczas Bash uruchomi aplikację, której ścieżka jest w linii hash-bang (w naszym przypadku <hl>/usr/bin/perl</hl>,
co jest standardową lokalizacją kompilatora-interpretera perl na większości współczesnych systemów Uniksowych).

Linia hash-bang zawiera ścieżkę do kompilatora-interpretera Perla.

Jeśli pierwsza linia nie zaczyna się od <hl>#!</hl>, jak miało to miejsce w naszym pierwotnym skrypcie, Bash będzie przypuszczał,
że jest to skrypt napisany w Bashu i będzie próbował zrozumieć go samodzielnie. Właśnie to powodowało błędy.

<h2>Alternatywne linie hash-bang z użyciem env</h2>

Choć używaliśmy <hl>#!/usr/bin/perl</hl> jako naszą linię hash-bang, może ona wyglądać inaczej. Na przykłąd jeśli zainstalowaliśmy
inną wersję perla w innej lokalizacji i chcemy, by nasze skrypty z niej korzystały, możemy podać ścieżkę
do tej wersji perla. Na przykład <hl>#!/opt/perl-5.18.2/bin/perl</hl>.

Przewaga ustawienia hash-bang (i włączenia bitu wykonywalności) jest taka, że użytkownik nie musi
wiedzieć, że skrypt jest napisany w Perlu i jeśli masz wiele instancji Perla w swoim systemie,
linia hash-bang może zostać użyta do wybrania, która wersja perla ma być użyta. Będzie ona taka sama dla wszytkich
ludzi na danej maszynie.
Wada jest taka, że wersja perla wymieniona w linii hash-bang jest wykorzystywana tylko, gdy skrypt jest uruchamiany
jako <hl>./hello.pl</hl> lub jako <hl>hello.pl</hl>.
Jeśli zostanie uruchomiony jako <hl>perl hello.pl</hl>, wykorzysta wersję perla, która zostanie znaleziona jako pierwsza
w katalogach wymienionych w PATH. I może ona być inna, niż wersja perla z linii hash-bang.

Z tego powodu, na współczesnych systemach Linux/Unix, ludzie mogą preferować użycie <hl>#!/usr/bin/env perl</hl> jako
linii hash-bang. Kiedy Bash zobaczy taką linię, najpierw wykona polecenie <hl>env</hl> przekazując <hl>perl</hl> do niego.
<hl>env</hl> znajdzie pierwszego perla w katalogach PATH i uruchomi go.
Zatem jeśli mamy <hl>#!/usr/bin/env perl</hl> w naszym skrypcie, zawsze będzie on korzystac z pierwszego perla w naszym PATH.
Zarówno, jeśli zostanie wywołany jako <hl>./hello.pl</hl>, jak i gdy zostanie wywołany przez <hl>perl hello.pl</hl>.
Ma to także wadę, ponieważ polega na właściwym ustawieniu zmiennej PATH przez użytkowników.

Oto tabela, która próbuje wyjaśnić 4 przypadki:

<code>
  hash-bang                  Który perl jest używany do uruchomienia skryptu przy wywołaniu:
                             ./hello.pl                    perl hello.pl

  /usr/bin/perl              /usr/bin/perl                 pierwszy perl w PATH
  /usr/bin/env perl          pierwszy perl w PATH          pierwszy perl w PATH
</code>


<h2>Flagi w linii hash-bang</h2>

W linii hash-bang, po ścieżce do perla, możemy przekazać perlowi flagi wiersza poleceń.
Prawdopodobnie zobaczysz wiele skrytpów zaczynających się od <hl>#!/usr/bin/perl -w</hl> czy
może <hl>#!/usr/bin/env perl -w</hl>.
<hl>-w</hl> w tym hash-bangu włącza ostrzeżenia. Jest to zupełnie podobne do tego, co robi
<a href="/instalacja-perla-i-rozpoczecie-pracy">use warnings</a>, ale jest użyte w starym stylu.
Nie zobaczysz tego w większości współczesnych skryptów Perla.

Kolejne popularne flagi, które możesz zobaczyć w linii hash-bang to <hl>-t</hl> i <hl>-T</hl>. Włączają
one tak zwany <b>taint-mode</b>, który pomaga pisać bezpieczniejszy kod.
