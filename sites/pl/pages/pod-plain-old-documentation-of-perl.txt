=title POD - Plain Old Documentation
=timestamp 2015-08-08T13:40:59
=indexes POD, perldoc, =head1, =cut, =pod, =head2, documentation, pod2html, pod2pdf
=status show
=books beginner
=author szabgab
=comments_disqus_enable 0
=translator rozie
=original pod-plain-old-documentation-of-perl

=abstract start

Programiści zwykle nie lubią pisać dokumentacji. Częściowo z tego powodu, że
programy są zwykle plikami tekstowymi, a w wielu przypadkach od developerów
wymaga się pisania dokumentacji w jakimś edytora tekstu.

To wymaga nauki edytora tekstu i zainwestowania sporej energii w
postaranie się, żeby dokument "dobrze wyglądał" zamiast "miał dobrą treść".

Nie jest tak w przypadku Perla. Normalnie można napisać dokumentację
swoich modułów bezpośrednio w kodzie źródłowym i polegać na 
zewnętrznych narzędziach, które sformatują ją, by wyglądała dobrze.  

=abstract end

W tym odcinku <a href="/perl-tutorial">samouczka Perla</a>
zapoznamy się z <b>POD - Plain Old Documentation</b> który jest
językiem znaczników używanym przez developerów perla.

Prosty kawałek perlowego kodu z POD wygląda tak:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

This script can have 2 parameters. The name or address of a machine
and a command. It will execute the command on the given machine and
print the output to the screen.

=cut

print "Here comes the code ... \n";
</code>

Jeśli zapiszesz go jako <hl>script.pl</hl> i uruchomisz używając <hl>perl script.pl</hl>,
perl pominie wszystko pomiędzy liniami <hl>=pod</hl> oraz <hl>=cut</hl>.
Wykona tylko faktyczny kod.

Z drugiej strony, jeśli wpiszesz  <hl>perldoc script.pl</hl>, polecenie <b>perldoc</b>
zignoruje cały kod. Pobierze tylko linie pomiędzy <hl>=pod</hl> oraz <hl>=cut</hl>,
sformatuje je według pewnych reguł i wyświetli je na ekranie.

Reguły te zależą od Twojego systemu operacyjnego, ale są dokładnie takie same jak
te, które widziałeś kiedy uczyliśmy się o
<a href="/core-perl-documentation-cpan-module-documentation">podstawowej dokumentacji Perla</a>.

Wartością dodaną używania zagnieżdżonego POD is to, że Twój kod nigdy nie będzie
dostarczony przypadkowo bez dokumentacji, gdyż jest ona wewnątrz modułów i skryptów.
Możesz także powtórnie wykorzystaywać narzędzia i infrastrukturę społeczności Open Source Perl
dla siebie. Nawet na wewnętrzny użytek.

<h2>Zbyt proste?</h2>

Założeniem jest, że jeśli usuniesz większość przeszkód do pisania
dokumentacji, wówczas ludzie będą pisać dokumentację. Zamiast uczyć się
korzystania z edytora tekstu do tworzenia ładnie wyglądających dokumentów, możesz po prostu
wpisać trochę tekstu z dodatkowymi symbolami i otrzymasz rozsądnie wyglądających
dokument. (Sprawdź domumentację na <a href="http://metacpan.org/">Meta CPAN</a>
aby zobaczyć ładnie sformatowane wersje POD.

<h2>Język znaczników</h2>

Szczegółowy opis <a href="http://perldoc.perl.org/perlpod.html">języka znaczników POD</a>
można znaleźć wpisując <a href="http://perldoc.perl.org/perlpod.html">perldoc perlpod</a> ale
jest on bardzo prosty.

Istnieje kilka tagów takich jak <hl>=head1</hl> i <hl>=head2</hl>
do oznaczania nagłówków jako "bardzo ważne" oraz "nieco mniej ważne".
Jest <hl>=over</hl> do tworzenia wcięć oraz <hl>=item</hl>
to tworzenia punktów, oraz parę innych.

Istnieje <hl>=cut</hl> do oznaczania końca sekcji POD oraz
<hl>=pod</hl> do jej rozpoczęcia. Chociaż rozpoczynanie nie jest ścićle wymagane.

Każdy ciąg znaków zaczynający się od znaku równości <hl>=</hl> jako pierwszego znaku, będzie
interpretowany jako znacznik POD, i rozpocznie sekcję POD zamykaną przez <hl>=cut</hl>.

POD pozwala nawet na umieszczanie hiperłączy przy użyciu notacji L&lt;jakiś-link>

Teks pomiędzy częściami znaczników będzie pokazany jako akapity czystego tekstu.

Jeśi tekst nie zacznie się od pierwszego znaku w linii, będzie traktowany dosłownie,
czyli będzie wyglądał dokładnie tak, jak został wpisany: długie linie pozostaną
długimi liniami, a krótkie pozostaną krótkie. Może to być wykorzystane do przykładów kodu.

Ważną rzeczą do zapamiętania jest to, że POD wymaga pustych wierszy dookoła tagów.
Zatem

<code lang="perl">
=head1 Title
=head2 Subtitle
Some Text
=cut
</code>

nie zrobi tego, czego oczekujesz.

<h2>Wygląd</h2>
Jako że POD jest językiem znaczników, sam z siebie nie definiuje, jak rzeczy zostaną wyświetlone.
Używanie <hl>=head1</hl> wskazuje na coś ważnego, <hl>=head2</hl> oznacza coś mniej ważnego.

Narzędzie używane do wyświetlania POD zwykle użyje większych znaków do wyświetlenia
tekstu head1, niż do head2, który z kolei będzie wyświetlony przy użyciu większych fontów niż zwykły
tekst. Kontrola jest w rękach narzędzia do wyświetlania.

Polecenia <hl>perldoc</hl>, które jest dystrybuowane z perlem, wyświetla POD jako stronę man. Jest to całkiem przydatne na Linuksie.
Nie tak bardzo na Windows.

Moduł <a href="https://metacpan.org/pod/Pod::Html">Pod::Html</a> dostarcza kolejne narzędzie pracujące w wierszu poleceń
zwane <hl>pod2html</hl>. Potrafi ono konwertować POD na dokument HTML, który możesz obejrzeć w przeglądarce.

Istnieją też dodatkowe narzędzia do generowania pdf czy mobi z POD.

<h2>Kto jest obiorcą?</h2>

Po zapoznaniu sie z techniką, zobaczmy, kto jest obiorcą?

Komentarze (to, co zaczyna się od #) są wyjaśnieniami dla
programistów. Dla osoby, która potrzebuje dodawać funkcjonalności
lub poprawiać błędy.

Dokumentacja napisana w POD jest dla użytkowników. Dla ludzi, którzy
nie powinni patrzeć na kod źródłowy. W przypadku aplikacji tych, którzy są
nazywani "użytkownikami końcowymi". Czyli dla każdego.

W przypadku modułów Perla, użytkownikami są także inni programiści Perla,
którzy potrzebują tworzyć aplikację lub inne moduły. Oni nadal nie powinni
musieć patrzeć w Twój kod źródłowy. Powinni być w stanie używać
Twojego modułu po prostu czytając dokumentację przy użyciu
polecenia <hl>perldoc</hl>.

<h2>Podsumowanie</h2>

Pisanie dokumentacji i sprawienie, by wyglądała ładnie, nie jest tak trudne w Perlu.


