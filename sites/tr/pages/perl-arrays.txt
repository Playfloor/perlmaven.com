=title Perl Dizileri
=timestamp 2015-03-29T20:45:02
=description perl array denoted with @ - creating, checking size, iterating over the elements, accessing elements
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift, $#
=status show
=original perl-arrays
=books beginner
=author szabgab
=translator kbeyazli
=comments_disqus_enable 0

=abstract start

<a href="/perl-tutorial">Perl eğitiminin</a> bu bölümünde <b>Perl'de dizileri</b> öğreneceğiz.
Bu bölüm Perl'de dizilerin nasıl çalıştığına dair bir bakış olacak. Daha detaylı açıklamaları sonra göreceğiz.

Perlde dizi değişken adları <hl>@</hl> karakteri ile başlar.

<hl>strict</hl> kullanımındaki ısrarımıza bağlı olarak, bu değişkenleri ilk kullanımda<hl>my</hl> anahtar sözcüğü 
ile tanımlamalısınız.

=abstract end

Örneklerin tümünde dosyanızın aşağıdaki terimlerle başladığını varsayıyoruz.

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

Bir dizi tanımlama

<code lang="perl">
my @names;
</code>

Dizi tanımlama ve değer atama:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>

<h2>Bir diziyi debug etme</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

Çıktı:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>foreach döngüsü ve Perl dizileri</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

Çıktı:

<code>
Foo
Bar
Baz
</code>

<h2>Dizinin bir elemanına erişim</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

Dizinin bir elemanına erişirken <hl>@</hl> işaretinin <hl>$</hl> işaretine dönüştüğüne dikkat edelim.
Bu bazi insanlarda karışıklığa yol açabilir ama düşünüldüğünde sebebinin açık olduğu görülür.

<hl>@</hl> çoğul u gösterir, <hl>$</hl> ise tekili. Dizinin bir elemanına erişirken
düzgün skalar bir değişken gibi davranış gösterir.

<h2>Diziyi indeksleme</h2>

Dizinin indeksi 0'dan başlar. Son index şu değişkende tutulmaktadır
<hl>$#dizinin_adı</hl>. Bu nedenle

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

kod parçacığı ekrana 2 yazar çünkü ideksler 0,1 ve 2'dir.

<h2>Dizinin uzunluğu veya boyutu</h2>

Perl'de dizinin boyutunu bulmak için özel bir fonksiyon yoktur ama boyutu hesaplamak
için birçok yol vardır. Bir tanesi, dizinin son indeksinin 1 fazlası değerin dizinin
boyutu olduğudur. Yukarıdaki örnekte <hl>$#names+1</hl> dizinin <b>boyutu</b> veya
<b>uzunluğu</b>dur.

Ek olarak <hl>scalar</hl> fonksiyonu dizinin boyutunu bulmak için kullanılabilir:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

Ekrana 3 yazar.

scalar fonksiyonu bir çeşit tip dönüştürme fonksiyonudur, diziyi skalar a dönüştürür. 
Bu dönüşüm aynı zamanda dizinin boyutunu verir.

<h2>Bir dizinin indeksleri üzerinde döngü</h2>

Dizinin değerleri üzerinde dönmenin yeterli olmadığı durumlar vardır.
Hem değere hem de değerin indeksine ihtiyacımız olabilir.
Bu durumda indeksler üzerinde dönmeye ve indeksleri kullanarak değerlere ulasmaya
ihtiyacımız var:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

çıktı:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>push kullanımı</h2>

<hl>push</hl> dizinin sonuna yeni bir eleman ekler, diziyi büyütür:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

Sonuç:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>pop kullanımı</h2>

<hl>pop</hl> dizinin son elemanini alır:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

Sonuç:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>shift kullanımı</h2>

<hl>shift</hl> dizinin sol ilk elemanını donderir
ve diğer elemanları bir sola kaydırır:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

Sonuç:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

