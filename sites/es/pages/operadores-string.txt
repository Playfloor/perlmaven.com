=title Operadores para strings: concatenación (.) y repetición (x)
=timestamp 2015-04-06T11:30:01
=indexes x, ., ++
=status show
=original string-operators
=books beginner
=author szabgab
=translator davidegx
=comments_disqus_enable 0

=abstract start

Además de los <a href="/operadores-numericos">operadores numéricos</a>, Perl tiene dos operadores
pensados especialmente para cadenas de texto.
Uno de ellos es <hl>.</hl> para concatenar, el otro es <hl>x</hl> (x minúscula) para repetición.

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 'Hola';
my $y = 'Mundo';

my $z = $x . ' ' . $y;
say $z;
</code>

Ejecutando el código anterior obtendrás:

<code>
Hola Mundo
</code>

El operador <hl>.</hl> simplemente concatena el texto de las dos variables
y el espacio creando un nuevo string.

En el caso anterior no necesitamos usar la concatenación con <hl>.</hl>, usando
la <a href="/strings-entrecomillados-interpolados-y-escapados-en-perl">interpolación de variables escalares</a>
dentro de strings podemos escribir:

<code lang="perl">
my $z = "$x $y";
</code>

y obtendríamos el mismo resultado.

<h2>Cuando la interpolación no funciona</h2>

Hay muchos casos donde la concatenación no se puede remplazar con interpolación. Por ejemplo:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 2;
my $y = 3;

my $z = '2 + 3 da ' . ($x + $y);

say $z;
</code>

Mostrará:

<code>
2 + 3 da 5
</code>

Por otro lado, si usamos interpolación en lugar de concatenación:

<code lang="perl">
my $z = "2 + 3 da ($x + $y)";
</code>

Obtendremos:

<code>
2 + 3 da (2 + 3)
</code>

<h2>x, el operador de repetición</h2>

El operador <hl>x</hl> espera un string como operador en el lado izquierdo y un número en el lado
derecho.
Devolverá el texto del lado izquierdo repetido tantas veces como indica el valor del lado derecho.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $y = 'Jar ';

my $z = $y x 2;
say $z;

say $y x 2 . 'Binks';
</code>

devuelve:

<code>
Jar Jar 
Jar Jar Binks
</code>

Este operador no se usa a menudo, pero puede ser útil en algunos casos.
Por ejemplo, si quieres añadir una línea del mismo tamaño que el título de un informe:

<code lang="perl">
use strict;
use warnings;
use 5.010;


print "Por favor introduce el titulo: ";
my $title = <STDIN>;
chomp $title;

say $title;
say '-' x length $title;
</code>

Aquí la línea mostrada bajo el título es exactamente del mismo tamaño (en número de caracteres)
que el título.

<code>
$ perl informe.pl 
Por favor introduce el titulo: hola
hola
-----

$ perl informe.pl 
Por favor introduce el titulo: hola mundo
hola mundo
-----------
</code>

<h2>++ en un string</h2>

Aunque se podría esperar que el operador de auto-incremento (<hl>++</hl>) funcionase
<a href="/operadores-numericos">solo con números</a>, también funciona con strings en Perl.

Si Perl encuentra un string en lugar de un número seleccionará el último carácter y lo
incrementa usando la las letras minúsculas y mayúsculas de la tabla <a href="https://es.wikipedia.org/wiki/ASCII">ASCII</a>.
Si un string termina con la letra 'y' y la incrementamos cambiará a 'z'. Si termina con 'z'
y la incrementamos de nuevo cambiará a la letra 'a' y el carácter a su izquierda será
incrementado también.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = "ay";
say $x;
$x++;
say $x;


$x++;
say $x;

$x++;
say $x;

$x--;
say $x;
</code>

El resultado será:

<code>
ay
az
ba
bb
-1
</code>

Como puedes ver, el operador <hl>--</hl> no funciona con strings.

