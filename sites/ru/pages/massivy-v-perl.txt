=title Perl Arrays
=timestamp 2013-12-21T12:00:02
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift
=status show
=original perl-arrays
=books beginner
=author szabgab
=translator spidamoo
=comments_disqus_enable 0

=abstract start

В этой части <a href="/perl-tutorial">Учебника Perl</a> мы узнаем о <b>массивах в Perl</b>. Это 
обзор работы массивов в Perl. Более подробные объяснения рассмотрим позже.

Имена переменных для массивов в Perl начинаются с &laquo;собаки&raquo;: <hl>@</hl>.

Из-за того, что мы настаиваем на использовании режима <hl>strict</hl>, эти переменные перед первым
использованием также нужно объявлять с помощью ключевого слова <hl>my</hl>.

=abstract end

Не забудьте, что все приведенные ниже примеры предполагают, что в начале вашего скрипта написано

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

Объвляем массив:

<code lang="perl">
my @names;
</code>

Создаем и присваиваем значения:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>


<h2>Дебаггинг массива</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

Выведет:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>Цикл foreach и массмвы perl</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

выведет:

<code>
Foo
Bar
Baz
</code>

<h2>Обращение к элементу массива</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

Обратите внимание, что при обращении к одному элементу массива сигил меняется с <hl>@</hl> на 
<hl>$</hl>. Это может ввести кого-то в заблуждение, но если подумать, становится довольно очевидно,
в чем тут дело.

<hl>@</hl> указывает на множественное, а <hl>$</hl> указывает на единичное. При обращении к одному
элементу массива он ведет себя так же, как и обычная скалярная переменная.

<h2>Индексация массива</h2>

Индексы массива отсчитываются с нуля. Самый большой индекс всегда содержится в переменной 
<hl>$#имя_массива</hl>. Так что

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

Выведет 2, так как индексам будут 0, 1 и 2.

<h2>Длина или размер массива</h2>

В Perl нет специальной функции, чтобы получить размер массива, но есть несколько способов узнать эту
величину. Например, размер массива всегда на один больше, чем старший индекс. В приведенном примере
<b>размером</b> или <b>длиной</b> массива было бы <hl>$#names+1</hl>.

Кроме того, для получения размера массива можно использовать функцию <hl>scalar</hl>:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

Выведет 3.

Функция scalar это функция приведения, которая, среди прочего, превращает массив в скаляр. По
произвольному, но мудрому решению, это преобразование выдает размер массива.

<h2>Индексы массива в цикле</h2>

В некоторых случаях обхода значений массива в цикле будет недостаточно. Нам может понадобиться и 
значение, и индекс. В этом случае нужно обойти в цикле индексы массива и получить с их помощью 
значения:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

выведет:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>push в массивах Perl</h2>

Функция <hl>push</hl> добавляет новое значение в конец массива, расширяя его:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

Результат выполнения кода:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>pop в массивах Perl</h2>

Функция <hl>pop</hl> извлекает последний элемент из массива:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

Результат выполнения кода:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>shift в массивах Perl</h2>

Функция <hl>shift</hl> возвращает первый элемент массива и сдвигает остальные элементы влево.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

Результат выполнения кода:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

