=title Operadores textuais: concatenação (.), repetição (x)
=timestamp 2014-10-30T09:48:00
=indexes x, ., ++
=status show
=original string-operators
=books beginner
=author szabgab
=translator leprevost
=comments_disqus_enable 0

=abstract start

Em adição aos <a href="/operadores-numericos">operadores numéricos</a> o Perl possui dois operadores utilizados especialmente em textos.
Um deles é o <hl>.</hl> para concatenação, e o outro é <hl>x</hl> para repetições.

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 'Hello';
my $y = 'World';

my $z = $x . ' ' . $y;
say $z;
</code>

A execução do código acima gera o seguinte resultado:

<code>
Hello World
</code>

A função juntou o texto da variável e o elemento literal em um único texto.

Na verdade, no exemplo acima não precisaríamos ter que utilizar o operador <hl>.</hl> de concatenação para chegar no resultado. A linguagem fornece a função de interpolação de variáveis em texto, então poderíamos apenas escrever:


<code lang="perl">
my $z = "$x $y";
</code>

e isso acabaria dando o mesmo resultado.

<h2>Quando a interpolação não é a resposta certa</h2>

Obviamente existem casos onde a concatenação não pode ser substituída pela interpolação. Veja o seguinte código como exemplo:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 2;
my $y = 3;

my $z = 'Take ' . ($x + $y);

say $z;
</code>

O resultado será

<code>
Take 5
</code>

Por outro lado, se substituirmos a concatenação pela interpolação: 

<code lang="perl">
my $z = "Take ($x + $y)";
</code>

Então nós temos:

<code>
Take (2 + 3)
</code>

Você deve ter notado que eu também mudei de aspas simples para aspas duplas quando eu quis utilizar a interpolação. Nós discutiremos isso mais a fundo em outro artigo.

<h2>Operador de repetição x</h2>

O operador <hl>x</hl> espera um texto do seu lado esquerdo e um número ao seu lado direito.
Ele retornará o texto do lado esquerdo repetido tantas vezes quanto foi definido pelo valor do lado direito.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $y = 'Jar ';

my $z = $y x 2;
say $z;

say $y x 2 . 'Binks';
</code>

resulta:

<code>
Jar Jar 
Jar Jar Binks
</code>

Eu imagino que este operador seja pouco utilizado, mas pode ser bastante útil nesses raros casos.
Por exemplo, quando você quer adicionar uma linha com o mesmo tamanho do seu título:

<code lang="perl">
use strict;
use warnings;
use 5.010;


print "Please type in the title: ";
my $title = <STDIN>;
chomp $title;

say $title;
say '-' x length $title;
</code>

Aqui, a linha que imprimimos abaixo do título possui exatamente o mesmo tamanho (em número de caracteres) do título.

<code>
$ perl report.pl 
Please type in the title: hello
hello
-----

$ perl report.pl 
Please type in the title: hello world
hello world
-----------
</code>

<h2>Utilizando ++ em textos</h2>

Apesar de imaginar que o operador de auto incremento (<hl>++</hl>) <a href="/operadores-numericos">atue somente em números</a>, o Perl possui um uso especial para o operador <hl>++</hl> em textos.

O operador pega o último caractere de um texto e o incrementa em uma unidade, de acordo com a tabela ASCII. Tanto letras de caixa baixa quanto de caixa alta. Se nós incrementarmos um texto que termine com a letra ‘y’, ele irá mudar o caractere para ‘z’. Se o texto terminar em ‘z’, então o incremento irá mudá-lo para a letra ‘a’, mas nesse caso a letra à esquerda irá mudar também

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = "ay";
say $x;
$x++;
say $x;


$x++;
say $x;

$x++;
say $x;

$x--;
say $x;
</code>

O resultado é:

<code>
ay
az
ba
bb
-1
</code>

Como você pode ver, o operador <hl>--</hl> não funciona em textos.
